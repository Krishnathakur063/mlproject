1:- Creating Virtual Environment in Anaconda
	Command:- conda create -p <Environment Name> python==<python version(3.11)>

2:- Activating  the Virtual Environment
	Command:- 1:- conda init
		  2:-  conda activate venv/

3:- Creating GitHub Repository
	1:- First Create Readme.md in VS Code
	2:- echo "# mlproject" >> README.md
		echo "# mlproject" >> README.md
		git init
		git add README.md
		git commit -m "first commit"
		git branch -M main
		git remote add origin https://github.com/Krishnathakur063/mlproject.git
		git push -u origin main

4:- Creating '.gitignore' file to protect from pushing venv file into github repository	
	1:- Choose .gitignore template --> Select Python --> Then Click on Commit  Changes.
	2:- git pull origin main --> This command will download .gitignore file in your main folder in your local system.

5:- Create 'requirements.txt' and then type the package into it which you want to use. We can also mention  the
	version name in requirements.txt with package name  like 'numpy 1.6'
    
	To Install 'requirements.txt' type below command:-
		Command:- pip install -r requirements.txt

6:- Creating 'setup.py' 
	Importance of 'setup.py' :- setup.py is required if we want to create our project as a package so we
	can push our project to PyPI. We also need to mention all the project related details  in 'setup.py' file.

7:- Create 'src' folder then create '__init__.py' file into it.

8:- To Run 'setup.py' file type below command:-
	Command:- python setup.py install

    Alternatively,
		Then type '-e .' in requirements.txt --> This '-e .' when we run requirements.txt then -e will see the
	'setup.py' file automatically.
	Now type below command to install setyp.py with the help of requirements.txt
	==> Command:- pip install -r requirements.txt

############ Enter Below Code in "setup.py" ##################

from setuptools import find_packages, setup
from typing import List

HYPEN_E_DOT='-e .'

def get_requirements(file_path:str)-> List[str]:
    '''
        This function will return the list of requirements.
    '''

    requirements=[]

    with open(file_path) as file_obj:
        requirements=file_obj.readline()
        requirements=[req.replace('\n',"") for req in requirements]

        if HYPEN_E_DOT in requirements:
            requirements.remove(HYPEN_E_DOT)

    return requirements

setup(
    name='mlproject',
    version='0.0.1',
    author='Krishna',
    author_email='krishnathakur063@gmail.com',
    packages=find_packages(),
    install_requires=get_requirements('requirements.txt')    #['numpy','pandas']
)

############################## END OF SETUP.PY FILE #####################################



########### Creating Automated Folder and File Structure ###########

1:- Create a 'src' folder
2:- Create a 'template.py' file

####### Enter Below Code in "template.py" ############

import os
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO)

project_name = 'mlproject'

list_of_files = [
    # ".github/workflows/.gitkeep",
    f"src/{project_name}/__init__.py",
    f"src/{project_name}/components/__init__.py",
    f"src/{project_name}/components/data_ingestion.py",
    f"src/{project_name}/components/data_transformation.py",
    f"src/{project_name}/components/model_trainer.py",
    f"src/{project_name}/components/model_monitering.py",
    f"src/{project_name}/pipelines/__init__.py",
    f"src/{project_name}/pipelines/training_pipeline.py",
    f"src/{project_name}/pipelines/prediction_pipeline.py",
    f"src/{project_name}/exception.py",
    f"src/{project_name}/logger.py",
    f"src/{project_name}/utils.py",
    "main.py"
    "app.py",
    "Dockerfile",
    "requirements.txt",
    "setup.py"

]

for filepath in list_of_files:
    filepath = Path(filepath)
    filedir, filename = os.path.split(filepath)

    if filedir !="":
        os.makedirs(filedir, exist_ok=True)
        logging.info(f"Creating Directory:{filedir} for the file {filename}")

    if (not os.path.exists(filepath)) or (os.path.getsize(filepath) ==0):
        with open(filepath, 'w') as f:
            pass
            logging.info(f"Creating Empty File: {filepath}")

    else:
        logging.info(f"{filepath} is already exists")

############################## END OF TEMPLATE.PY FILE #####################################

